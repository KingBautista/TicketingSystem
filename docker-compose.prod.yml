version: '3.8'

services:
  postgres:
    image: postgres:17.5-alpine
    container_name: ticketing_postgres_prod
    environment:
      POSTGRES_DB: ticketing_system
      POSTGRES_USER: ticketing_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.prod.conf:/etc/postgresql/postgresql.conf
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - ticketing_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticketing_user -d ticketing_system"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  laravel:
    build:
      context: .
      dockerfile: docker/laravel/Dockerfile.prod
    container_name: ticketing_laravel_prod
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=ticketing_system
      - DB_USERNAME=ticketing_user
      - DB_PASSWORD=${DB_PASSWORD}
      - CACHE_DRIVER=file
      - SESSION_DRIVER=file
      - QUEUE_CONNECTION=sync
    volumes:
      - ./storage:/var/www/html/storage
      - ./public/uploads:/var/www/html/public/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ticketing_network
    healthcheck:
      test: ["CMD", "php", "artisan", "route:list"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  admin_panel:
    build:
      context: ./admin-panel
      dockerfile: ../docker/admin-panel/Dockerfile.prod
    container_name: ticketing_admin_panel_prod
    environment:
      - VITE_API_BASE_URL=${API_URL:-http://localhost:8080}
    networks:
      - ticketing_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  client_printer:
    build:
      context: ./client-printer-service
      dockerfile: ../docker/client-printer/Dockerfile
    container_name: ticketing_client_printer_prod
    environment:
      - PORT=3001
      - API_URL=${API_URL}
    networks:
      - ticketing_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  pd300_display:
    build:
      context: ./pd300-display
      dockerfile: ../docker/pd300-display/Dockerfile
    container_name: ticketing_pd300_display_prod
    environment:
      - API_URL=${API_URL}
    volumes:
      - /dev:/dev:ro
    devices:
      - /dev/bus/usb:/dev/bus/usb
    networks:
      - ticketing_network
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('PD300 service running')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: ticketing_nginx_prod
    ports:
      - "80:80"
      - "8080:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./storage/logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl
      - .:/var/www/html
    depends_on:
      - laravel
      - admin_panel
    networks:
      - ticketing_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  ticketing_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
